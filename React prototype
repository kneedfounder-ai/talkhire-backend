/*
TalkHire — React + Tailwind prototype with safe API handling and JSON parsing fix
This version adds error handling for non-JSON responses to avoid the "Unexpected token '<'" error.
*/

import React, { useEffect, useState } from "react"

export default function App() {
  const [companies, setCompanies] = useState([])
  const [reviews, setReviews] = useState([])
  const [companyReplies, setCompanyReplies] = useState({})

  // Helper to safely parse JSON and handle non-JSON responses
  const fetchJSON = async (url) => {
    try {
      const res = await fetch(url)
      const text = await res.text()
      try {
        return JSON.parse(text)
      } catch {
        console.error(`Expected JSON but got: ${text}`)
        return []
      }
    } catch (err) {
      console.error(err)
      return []
    }
  }

  useEffect(() => {
    const loadData = async () => {
      const companiesData = await fetchJSON('/api/companies')
      setCompanies(companiesData)
      const reviewsData = await fetchJSON('/api/reviews')
      setReviews(reviewsData)
    }
    loadData()
  }, [])

  const companyAverage = (companyId) => {
    const companyReviews = reviews.filter(r => r.companyId === companyId)
    if (!companyReviews.length) return 0
    return Math.min(5, Math.max(0, companyReviews.reduce((s,r)=>s+Number(r.score),0)/companyReviews.length))
  }

  const renderStars = (rating) => {
    const full = Math.round(rating)
    return Array.from({ length: 5 }, (_, i) => (i < full ? "★" : "☆")).join("")
  }

  const handleReplyChange = (reviewId, text) => setCompanyReplies(prev => ({ ...prev, [reviewId]: text }))

  const submitReply = async (reviewId) => {
    try {
      const res = await fetch('/api/replies', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ reviewId, text: companyReplies[reviewId] })
      })
      await res.json() // ignore content if not JSON
      setCompanyReplies(prev => ({ ...prev, [reviewId]: '' }))
    } catch (err) {
      console.error(err)
    }
  }

  const sortedCompanies = [...companies].sort((a,b)=> companyAverage(b.id)-companyAverage(a.id))

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-950 via-gray-900 to-gray-800 text-gray-200 font-sans p-6">
      <header className="max-w-6xl mx-auto flex flex-col items-center mb-6">
        <h1 className="text-3xl font-extrabold tracking-tight text-white">TalkHire</h1>
        <p className="text-xs text-gray-400 mb-2">Candidate-powered interview reviews</p>
        <div className="flex space-x-2">
          <div className="w-4 h-4 border-2 border-gray-400 rounded-full" />
          <div className="w-4 h-4 border-2 border-gray-400 rounded-full -ml-1" />
        </div>
      </header>

      <main className="max-w-6xl mx-auto grid grid-cols-3 gap-6">
        <section className="col-span-2 space-y-4">
          <div className="flex justify-center mb-4">
            <button className="bg-green-600 hover:bg-green-500 text-white font-bold text-lg px-8 py-4 rounded-lg shadow-lg transition-transform transform hover:scale-105">
              Write a Review
            </button>
          </div>
          {reviews.map(r => {
            const company = companies.find(c => c.id === r.companyId)
            if (!company) return null
            return (
              <article key={r.id} className="bg-gray-900/80 p-6 rounded-lg border border-gray-800 backdrop-blur-sm">
                <div className="flex items-center gap-3 mb-2">
                  <img src={company.logo || 'https://via.placeholder.com/32'} alt={company.name} className="w-8 h-8 rounded-full" />
                  <div>
                    <div className="text-xs text-gray-400">{company.name}</div>
                    <h3 className="text-2xl font-bold text-white leading-tight">{r.subject}</h3>
                  </div>
                </div>
                <div className="text-sm text-gray-400 mb-2">Position interviewed for: <strong className="text-gray-200">{r.role}</strong></div>
                <p className="text-gray-200 mb-4">{r.text}</p>
                <div className="flex items-center justify-between text-xs">
                  <div className="text-yellow-400">{renderStars(r.score)} <span className="text-gray-500 ml-2">({r.score}/5)</span></div>
                  <div className="flex items-center gap-3">
                    <button className="text-green-400">⬆ {r.upvotes || 0}</button>
                    <button className="text-gray-400">⬇ {r.downvotes || 0}</button>
                    <button className="text-red-500">⚑</button>
                  </div>
                </div>
                <div className="mt-4 border-t border-gray-700 pt-4">
                  <h4 className="text-sm font-semibold text-gray-300 mb-2">Company Response:</h4>
                  <textarea
                    value={companyReplies[r.id] || ''}
                    onChange={e => handleReplyChange(r.id, e.target.value)}
                    placeholder="Write your reply here..."
                    className="w-full bg-gray-800 text-gray-200 p-2 rounded-md text-sm border border-gray-700 focus:outline-none focus:ring-2 focus:ring-green-500"
                  />
                  <button onClick={() => submitReply(r.id)} className="mt-2 bg-green-600 hover:bg-green-500 text-white px-4 py-2 rounded text-sm font-bold">
                    Submit Reply
                  </button>
                </div>
              </article>
            )
          })}
        </section>

        <aside className="col-span-1 bg-gray-900/70 rounded-lg p-4 border border-gray-800 backdrop-blur flex flex-col items-center">
          <h3 className="font-semibold mb-3">Top Rated Companies (Live)</h3>
          <ul className="space-y-2 w-full">
            {sortedCompanies.map((c, i) => {
              const avg = companyAverage(c.id)
              const badge = avg >= 4 ? 'text-green-400' : avg >= 3 ? 'text-yellow-400' : 'text-red-400'
              return (
                <li key={c.id} className="p-2 rounded hover:bg-gray-800/70 transition-all cursor-pointer flex items-center gap-3">
                  <img src={c.logo || 'https://via.placeholder.com/32'} alt={c.name} className="w-6 h-6 rounded-full" />
                  <div className="flex-1">
                    <div className="flex justify-between items-center">
                      <div className="text-sm text-gray-300">{i + 1}. {c.name}</div>
                      <div className={`text-xs ${badge}`}>{avg.toFixed(1)}</div>
                    </div>
                    <div className={`text-xs ${badge} mt-1`}>{renderStars(avg)}</div>
                  </div>
                </li>
              )
            })}
          </ul>
        </aside>
      </main>
    </div>
  )
}
